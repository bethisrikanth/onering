#!/usr/bin/env ruby
ENV['PROJECT_ROOT'] = File.expand_path(File.dirname(File.dirname(__FILE__)))
$: << File.join(ENV['PROJECT_ROOT'], 'lib')
$: << File.join(ENV['PROJECT_ROOT'], 'plugins')

require 'app'

# require plugins
Dir[File.join(ENV['PROJECT_ROOT'],'plugins', '*')].each do |p|
  name = File.basename(p)
  require "#{name}/init"
end

module Automation
  class Worker
    def initialize()
      App::Config.load(ENV['PROJECT_ROOT'])
      App::Log.setup()
      App::Model::Elasticsearch.configure(App::Config.get('database.elasticsearch', {}))
      App::Queue.setup()
      Automation::Tasks::Base.load_all()
    end

    def start()
      puts "Worker started at #{Time.now.strftime("%Y-%m-%d %H:%M:%S %z")}, ready to process jobs.".foreground(:green)
      App::Log.increment("worker.process.started")

      App::Queue.channel('onering').subscribe do |message|
        header = {}
        start = Time.now
        success = true

        begin
          raise "Invalid message format: empty request" if message.body.strip.empty?
          header = MessagePack.unpack(message.body)

          raise "Invalid message format: field created_at is required" unless header['created_at']
          header['created_at'] = (Time.parse(header['created_at']) rescue nil)
          header['age'] = (Time.now.to_f - header['created_at'].to_f)

        # get job by id for logging
          job = Job.find(header['job_id']) unless header['job_id'] == 'anonymous'
          job_name = (job.name rescue 'unknown-'+header['job_id'])

        # start handling
          puts "Starting job #{job.name rescue 'unknown-'+header['job_id']} (request #{header['request_id']}), added at #{header['created_at'].strftime("%Y-%m-%d %H:%M:%S %z")} (#{"%.6f" % header['age']} seconds ago)...".foreground(:green)

          App::Log.increment("worker.jobs.#{job_name}.started")
          App::Log.timing("worker.jobs.#{job_name}.queuetime", (header['age'].to_f * 1000.0))

        # run job
          result = Job.run(header)

        rescue JobAbort => e
          STDERR.puts("[Job Aborted] #{e.message}".foreground(:yellow))
          App::Log.increment("worker.jobs.#{job_name}.aborted")
          success = false

        rescue JobFail => e
          STDERR.puts("[Job Failed] #{e.message}".foreground(:red))
          App::Log.increment("worker.jobs.#{job_name}.failed")
          success = false

        rescue Exception => e
          STDERR.puts("[Job Error] #{e.class.name}: #{e.message}".foreground(:red))

          e.backtrace.each do |b|
            STDERR.puts("[Job Error]   #{b}".foreground(:red))
          end

          message.release()

          App::Log.increment("worker.jobs.#{job_name}.errors")
          success = false
          message = nil

        ensure
          message.delete() unless message.nil?
          time_to_complete = (Time.now - start).to_f
          puts "Finished job #{job.name rescue 'unknown-'+header['job_id']} (took #{"%.6f" % time_to_complete} seconds)...".foreground(success ? :green : :red)

          App::Log.increment("worker.jobs.#{job_name}.succeeded")
          App::Log.timing("worker.jobs.#{job_name}.runtime", (time_to_complete * 1000.0))
        end
      end
    end
  end
end

begin
  EM.run do
    Automation::Worker.new.start()
  end

rescue Interrupt
  puts "Shutting down worker at #{Time.now.strftime("%Y-%m-%d %H:%M:%S %z")}"
  App::Log.increment("worker.process.stopped")

rescue Exception => e
  STDERR.puts("[Worker Error] #{e.class.name}: #{e.message}".foreground(:red))
  e.backtrace.each do |b|
    STDERR.puts("[Worker Error] #{b}".foreground(:red))
  end
  STDERR.puts("Exiting now".foreground(:red))

  App::Log.increment("worker.process.crashes")
  exit 1
end
