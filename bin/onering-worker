#!/usr/bin/env ruby
ENV['PROJECT_ROOT'] = File.expand_path(File.dirname(File.dirname(__FILE__)))

$: << File.join(ENV['PROJECT_ROOT'], 'lib')
$: << File.join(ENV['PROJECT_ROOT'], 'plugins')

require 'rubygems'
require 'active_support'
require 'mongo_patches'
require 'config'
require 'db'
require 'queue'
require 'utils'
require 'patches'
require 'model'
require 'eventmachine'
require 'msgpack'
require 'rainbow'

# require plugins
Dir[File.join(ENV['PROJECT_ROOT'],'plugins', '*')].each do |p|
  name = File.basename(p)
  require "#{name}/init"
end

module Automation
  class Worker
    def initialize()
      App::Config.load(ENV['PROJECT_ROOT'])
      App::Database::Base.load_all()
      App::Queue.setup()
      Automation::Tasks::Base.load_all()
    end

    def start()
      puts "Worker started at #{Time.now.strftime("%Y-%m-%d %H:%M:%S %z")}, ready to process jobs.".foreground(:green)

      App::Queue.channel('onering').subscribe do |message|
        header = {}
        start = Time.now
        success = true

        begin
          raise "Invalid message format: empty request" if message.body.strip.empty?
          header = MessagePack.unpack(message.body)

          raise "Invalid message format: field created_at is required" unless header['created_at']
          header['created_at'] = (Time.parse(header['created_at']) rescue nil)
          header['age'] = (Time.now.to_f - header['created_at'].to_f)

        # start handling
          puts "Starting job ID #{header['job_id']} (request #{header['request_id']}), added at #{header['created_at'].strftime("%Y-%m-%d %H:%M:%S %z")} (#{"%.6f" % header['age']} seconds ago)...".foreground(:green)

        # run job
          result = Job.run(header)

        rescue JobAbort => e
          STDERR.puts("[Job Aborted] #{e.message}".foreground(:yellow))
          success = false

        rescue JobFail => e
          STDERR.puts("[Job Failed] #{e.message}".foreground(:red))
          success = false

        rescue Exception => e
          STDERR.puts("[Job Error] #{e.class.name}: #{e.message}".foreground(:red))

          e.backtrace.each do |b|
            STDERR.puts("[Job Error]   #{b}".foreground(:red))
          end

          message.release()
          success = false
          message = nil

        ensure
          message.delete() unless message.nil?
          puts "Finished job ID #{header['job_id']} (took #{"%.6f" % (Time.now - start).to_f} seconds)...".foreground(success ? :green : :red)

        end
      end
    end
  end
end

begin
  Automation::Worker.new.start()

rescue Interrupt
  puts "Shutting down worker at #{Time.now.strftime("%Y-%m-%d %H:%M:%S %z")}"

rescue Exception => e
  STDERR.puts("[Worker Error] #{e.class.name}: #{e.message}".foreground(:red))
  e.backtrace.each do |b|
    STDERR.puts("[Worker Error] #{b}".foreground(:red))
  end
  STDERR.puts("Exiting now".foreground(:red))
  exit 1
end