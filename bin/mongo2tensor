#!/usr/bin/env ruby
ENV['PROJECT_ROOT'] = File.dirname(File.dirname(File.expand_path(__FILE__)))
$: << File.join(ENV['PROJECT_ROOT'], 'lib')
$: << File.join(ENV['PROJECT_ROOT'], 'plugins')

require 'pp'
require 'oj'
require 'multi_json'
require './lib/app'

i = 0

STDIN.read.lines.each do |line|
  if ARGV[0] and i >= ARGV[0].to_i
    STDERR.puts("Hit #{ARGV[0]} results, stopping")
    exit 1
  end

  next if line[0].chr == '#'
  next if line.strip.chomp.empty?

  data = {}
  notes = []
  line = MultiJson.load(line)

  line['id'] = line['_id']
  #line['_type'] = line['_type'].underscore

  line['_type'] = line['_type'].underscore
  line['_type'] = 'asset' if line['_type'] == 'device'
  line['_type'] = 'automation.job' if line['_type'] =~ /automation[\_\.]job/i

  line.delete('_id')

  if line['_type'].include?('::')
    parts = line['_type'].split('::')
  else
    parts = line['_type'].split(/[\.\/]/).collect{|i| i.split('_').collect{|i| i.capitalize }.join() }
  end


  base = parts[0..-2].inject(Object){|klass,i| klass = klass.const_get(i) }
  type = base.const_get(parts[-1])

  line.each_recurse(:intermediate => true) do |k,v,p|
    unless v.respond_to?(:empty?) and v.empty?
      if k =~ /_at$/
        if (v['$date'] rescue false)
          data.set(p, Time.at(v.get('$date') / 1000).strftime('%Y-%m-%dT%H:%M:%S%z'))
        else
          data.set(p, v)
        end
      elsif k =~ /[0-9]+/ and p[-2] == 'notes'
        v['user_id'] = 'onering' if v['user_id'].nil?

        notes << v

      elsif k == 'slot'
        data.set(p, v.to_s)

      elsif k == '$date'
        nil
      elsif k == '$oid'
        data.set('id', v)
      else
        data.set(p, v)
      end
    end
  end

  unless notes.empty?
    data.set('properties.notes', notes)
  end

# create or update the record
  begin
    type.create(data, {
      :reload => false
    })
  rescue Elasticsearch::Transport::Transport::Errors::BadRequest => e
    pp line['id']
    pp e
    next
  end

  i += 1
end